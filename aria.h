/* ARIA v1.0 implementation
 * based on [Specification](ftp://ructf.org/crypto/ARIA/doc/ARIA-specification-e.pdf)
 * Nikolay Dubina (dubyna.mykola@gmail.com)
 */
#include <array>
#include <iterator>
#include <algorithm>
#include <string>
#include <sstream>

namespace aria {
    /* Types */
    typedef std::array<uint8_t, 256> SBOX;
    typedef std::array<uint8_t, 16> segment;
    typedef std::array<uint8_t, 16> key128;     /* Careful! */
    typedef std::array<uint8_t, 24> key192;
    typedef std::array<uint8_t, 32> key256;

    /* Utility functions */
    std::string to_string(const segment& a){
        std::ostringstream sret;
        for(auto t: a)
            sret << std::hex << std::setw(2) << std::setfill('0') << (int)t;
        return sret.str();
    }

    template<class T>
    std::string to_string(const T& a){
        std::ostringstream sret;
        for(auto t: a)
            sret << std::hex << std::setw(2) << std::setfill('0') << (int)t;
        return sret.str();
    }

    template<int N>
    std::array<uint8_t, N> to_segment(const std::string& a){
        std::string r = a;

        if (r.substr(0, 2) == "0x")
            r = r.substr(2);

        assert(r.size() / 2 == N && r.size() % 2 == 0);

        std::array<uint8_t, N> ret;
        for(int i = 0; i < N; ++i){
            uint32_t x;
            std::istringstream(r.substr(2 * i, 2)) >> std::hex >> x;
            ret[i] = x & 0xff;
        }

        return ret;
    }

    segment to_segment(const std::string& a){ return to_segment<16>(a); }
    key128 to_128key(const std::string& a){ return to_segment<16>(a); }
    key192 to_192key(const std::string& a){ return to_segment<24>(a); }
    key256 to_256key(const std::string& a){ return to_segment<32>(a); }

    /* bitwise xor */
    segment operator^(const segment &l, const segment &r){
        segment ret;
        for(int i = 0; i < 16; ++i)
            ret[i] = l[i] ^ r[i];
        return ret;
    }

    /* left circular rotation by n bits */
    segment operator<<(const segment &a, int n){
        segment ret;
       
        if (n % 8 == 0)
            for(int i = 0; i < 16; ++i){
                ret[i] = a[(i + n / 8) % 16];
            }
        else
            for(int i = 0; i < 16; ++i){
                int idxr = (i + n / 8 + 1) % 16,
                    idxl = (i + n / 8) % 16;

                ret[i] = (a[idxl] << (n % 8)) | (a[idxr] >> (8 - n % 8));
            }

        return ret;
    }

    /* right circular rotation by n bits */
    segment operator>>(const segment &a, int n){
        segment ret;
       
        if (n % 8 == 0)
            for(int i = 0; i < 16; ++i){
                ret[i] = a[(16 + (i - n / 8)) % 16];
            }
        else
            for(int i = 0; i < 16; ++i){
                int idxl = (16 + (i - n / 8 - 1)) % 16,
                    idxr = (16 + (i - n / 8)) % 16;

                ret[i] = (a[idxl] << (8 - n % 8)) | (a[idxr] >> (n % 8));
            }

        return ret;
    }

    /* Constants */
    const SBOX sbox1 = {
             0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
             0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
             0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
             0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
             0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
             0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
             0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
             0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
             0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
             0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
             0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
             0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
             0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
             0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
             0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
             0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
        };


    const SBOX sbox1_inverse = {
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
        };

    const SBOX sbox2 = {
            0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
            0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
            0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
            0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
            0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
            0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
            0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
            0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
            0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
            0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
            0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
            0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
            0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
            0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
            0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
            0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81
        };

    const SBOX sbox2_inverse = {
            0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
            0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
            0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
            0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
            0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
            0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
            0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
            0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
            0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
            0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
            0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
            0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
            0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
            0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
            0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
            0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60
        };

    const std::array<std::array<uint8_t, 16>, 16> diffusion_table = {{
            {0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0},
            {0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1},
            {1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0},
            {1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1},
            {0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1},
            {1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0},
            {0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0},
            {1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1},
            {1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0},
            {0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1},
            {0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0},
            {0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0},
            {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0},
            {1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0},
            {0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1}
        }};

    const std::array<SBOX, 16> odd_layer = {
        sbox1, sbox2, sbox1_inverse, sbox2_inverse, 
        sbox1, sbox2, sbox1_inverse, sbox2_inverse, 
        sbox1, sbox2, sbox1_inverse, sbox2_inverse, 
        sbox1, sbox2, sbox1_inverse, sbox2_inverse
    };

    const std::array<SBOX, 16> even_layer = {
        sbox1_inverse, sbox2_inverse, sbox1, sbox2, 
        sbox1_inverse, sbox2_inverse, sbox1, sbox2, 
        sbox1_inverse, sbox2_inverse, sbox1, sbox2, 
        sbox1_inverse, sbox2_inverse, sbox1, sbox2
    };

    /* rational part of pi^-1 */
    /* given values form paper */
    /*
    const segment C1 = to_segment<16>("0x517cc1b727220a94fe12abe8fa9a6ee0");
    const segment C2 = to_segment<16>("0x6db14acc9e21c820ff28b1d5ef5de2b0");
    const segment C3 = to_segment<16>("0xdb92371d2126e970324977504e8c90e0");
    */

    /* values deduced from 128bit MK example in the specification */
    const segment C1 = to_segment<16>("0x517cc1b727220a94fe13abe8fa9a6ee0");
    const segment C2 = to_segment<16>("0x6db14acc9e21c820ff28b1d5ef5de2b0");
    const segment C3 = to_segment<16>("0xdb92371d2126e9700324977504e8c90e");

    /* Keys generation description
     * right  > 0 , left < 0
     * index of W, amount-direction of shift */
    const std::array<std::array<std::array<int, 2>, 2>, 17> keys_gentable = 
    {{
        {{ {0,   0}, {1,  19}} },   // 1
        {{ {1,   0}, {2,  19}} },   // 2
        {{ {2,   0}, {3,  19}} },   // 3
        {{ {0,  19}, {3,   0}} },   // 4
        {{ {0,   0}, {1,  31}} },   // 5
        {{ {1,   0}, {2,  31}} },   // 6
        {{ {2,   0}, {3,  31}} },   // 7
        {{ {0,  31}, {3,   0}} },   // 8
        {{ {0,   0}, {1, -61}} },   // 9
        {{ {1,   0}, {2, -61}} },   // 10
        {{ {2,   0}, {3, -61}} },   // 11
        {{ {0, -61}, {3,   0}} },   // 12
        {{ {0,   0}, {1, -31}} },   // 13
        {{ {1,   0}, {2, -31}} },   // 14
        {{ {2,   0}, {3, -31}} },   // 15
        {{ {0, -31}, {3,   0}} },   // 16
        {{ {0,   0}, {1, -19}} }    // 17
    }};

    /* ARIA functions */
       
    segment diffusion(const segment& x){
        segment ret;
        ret.fill(0);

        for(int i = 0; i < 16; ++i)
            for(int j = 0; j < 16; ++j)
                if (diffusion_table[i][j] == 1)
                    ret[i] = ret[i] ^ x[j];
        
        return ret;
    }

    segment substitution(const segment& a, const std::array<SBOX, 16>& sboxes){
        segment ret;

        for(int i = 0; i < 16; ++i)
            ret[i] = sboxes[i][a[i]];

        return ret;
    }

    segment round(const segment& a, const segment& key, const std::array<SBOX, 16>& sboxes){
        segment ret = a;

        ret = a ^ key;
        ret = substitution(ret, sboxes);
        ret = diffusion(ret);

        return ret;
    }

    /* even and odd round functions. NOTE: last round is always different */
    segment fe(const segment& a, const segment& key){ return round(a, key, even_layer); }
    segment fo(const segment& a, const segment& key){ return round(a, key, odd_layer); }

    template<int N>
    std::array<segment, 4> initialize(const std::array<uint8_t, N>& mk){
        static_assert( N == 16 || N == 24 || N == 32, "wrong key size");

        segment kl, kr;

        kl.fill(0);
        kr.fill(0);

        std::copy(mk.begin(), mk.begin() + 16, kl.begin());
        std::copy(mk.begin() + 16, mk.end(), kr.begin());

        /* 3 roud 256bit Feistel cipher */
        segment w0, w1, w2, w3;
        segment ck1, ck2, ck3;

        if (N == 16){
            ck1 = C1;
            ck2 = C2;
            ck3 = C3;
        }
        else if (N == 24){
            ck1 = C2;
            ck2 = C3;
            ck3 = C1;
        }
        else if (N == 32){
            ck1 = C3;
            ck2 = C1;
            ck3 = C2;
        }

        w0 = kl;
        w1 = fo(w0, ck1) ^ kr;
        w2 = fe(w1, ck2) ^ w0;
        w3 = fo(w2, ck3) ^ w1;

        return {w0, w1, w2, w3};
    }

    /* Keys generation */
    template<int rounds>
    std::array<segment, rounds> generate_keys(bool decrypt, const std::array<segment, 4>& ws)
    {
        std::array<segment, rounds> keys;
        
        for(int i = 0; i < rounds; ++i){
            int idxwl = keys_gentable[i][0][0],
                idxwr = keys_gentable[i][1][0];

            int wl_rot = keys_gentable[i][0][1],
                wr_rot = keys_gentable[i][1][1];

            segment wl = ws[idxwl], wr = ws[idxwr];

            if (wl_rot > 0)
                wl = wl >> wl_rot;
            else if (wl_rot < 0)
                wl = wl << abs(wl_rot);

            if (wr_rot > 0)
                wr = wr >> wr_rot;
            else if (wr_rot < 0)
                wr = wr << abs(wr_rot);

            keys[i] = wl ^ wr;
        }

        if (decrypt){
            reverse(keys.begin(), keys.end());
            for(int i = 1; i < rounds - 1; ++i)
                keys[i] = diffusion(keys[i]);
        }

        return keys;
    }

    template<int N>
    segment apply_rounds(bool decrypt, const segment& plaintext, const std::array<uint8_t, N>& mk){
        static_assert( N == 16 || N == 24 || N == 32, "wrong key size");
        constexpr int rounds = (N == 16) ? 12 : (N == 24) ? 14 : 16;

        std::array<segment, rounds + 1> keys = generate_keys<rounds + 1>(decrypt, initialize<N>(mk));
        
        segment ret = plaintext;
        for(int i = 0; i < rounds - 1; ++i){
            if (i % 2 == 1)
                ret = fe(ret, keys[i]);
            else
                ret = fo(ret, keys[i]);
        }
       
        /* last round with key add instead of diffusion */
        ret = ret ^ keys[rounds - 1];
        ret = substitution(ret, even_layer);
        ret = ret ^ keys[rounds];

        return ret;
    }

    template<int N>
    segment encrypt(const segment& plaintext, const std::array<uint8_t, N>& mk){
        return apply_rounds<N>(false, plaintext, mk);
    }

    template<int N>
    segment decrypt(const segment& plaintext, const std::array<uint8_t, N>& mk){
        return apply_rounds<N>(true, plaintext, mk);
    }
}
